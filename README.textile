h3. What's New?

 * Pagination! CouchDB offers great support for retrieving a subset of data, but the housekeeping is tricky. RelaxDB takes care of it.
 * Works with CouchDB 0.9 trunk as of 2008/10/08. Note that pagination won't work on trunk unil https://issues.apache.org/jira/browse/COUCHDB-135 is fixed.

h2. Overview

RelaxDB provides a Ruby interface to CouchDB. It offers a simple idiom for specifying object relationships. The underlying objects are persisted to the mighty CouchDB. Combined with the schema free nature of CouchDB, RelaxDB's current strength lies in quick prototyping of object models.

A few facilities are provided including pretty printing of GET requests and uploading of JavaScript views.

A basic merb plugin, "merb_relaxdb":http://github.com/paulcarey/merb_relaxdb/tree/master is also available.

For more complete documentation take a look at docs/spec_results.html and the corresponding specs.

h2. Details 

h3. Getting started

<pre>
<code>
  RelaxDB.configure :host => "localhost", :port => 5984
  RelaxDB.use_db "scratch"
</code>
</pre>

h3. Defining models

<pre>
<code>
  class Writer < RelaxDB::Document
    property :name, :default => "anon"
    
    has_many :posts, :class => "Post"
    has_many :ratings, :class => "Post", :known_as => :critic
  end

  class Post < RelaxDB::Document
    property :created_at
    property :contents
  
    belongs_to :writer  
    has_many :ratings, :class => "Rating"
  end

  class Rating < RelaxDB::Document
    property :thumbs_up, :validator => lambda { |tu| tu >= 0 && tu < 3 }, :validation_msg => "No no"

    belongs_to :post
    belongs_to :critic
  end
</code>
</pre>

h3. Exploring models

<pre>
<code>
  paul = Writer.new(:name => "paul").save

  post = Post.new(:contents => "foo")
  paul.posts << post                                          # post writer is set and post is saved
  post.created_at                                             # right now
  paul.ratings << Rating.new(:thumbs_up => 3, :post => post)  # returns false as rating fails validation
  paul.ratings.size                                           # 0

  # Simple views are auto created
  Rating.all.sorted_by(:thumbs_up) { |q| q.key(2).count(1) }  # query params map directly to CouchDB
</code>
</pre>

h3. Paginating

<pre>
<code>
  # Controller (merb-action-args used for extracting view_params)

  def action(view_params={})
    u_id = @user._id

    @posts = Post.paginate_by(view_params, :writer_id, :created_at) do |p|
      p.startkey([u_id, {}]).endkey([u_id]).descending(true).count(5)
    end
    render
  end
  
  # In your view
  
  <% @posts.each do |p| %>
    <%= p.contents %>
  <% end %>
  
  <%= link_to "prev", "/posts/?#{@posts.prev_query}" if @posts.prev_query %>
  <%= link_to "next", "/posts/?#{@posts.next_query}" if @posts.next_query %>  
</code>
</pre>

h3. Creating views by hand

<pre>
<code>
  $ cat view.js 
  function Writer-allnames-map(doc) {
    if(doc.class == "Writer")
      emit(null, doc.name);
  }

  function Writer-allnames-reduce(keys, values) {
    var allnames = "";
    for(var i = 0; i < values.length; i++)
      allnames += values[i];
    return allnames;
  }
  $

  RelaxDB::ViewUploader.upload("view.js")
  RelaxDB.view("Writer", "allnames")                          # paul
</code>
</pre>

h3. Visualise

Create an object graph by simply running
<pre>
<code>
RelaxDB::GraphCreator.create
</code>
</pre>

Requires graphviz. Useful for visualising relationships between a limited number of document e.g. test fixtures. "Description and example":http://dev.strawberrydiva.com/visually_explore_couchdb/.

h3. Experimental Features

* Declarative denormalisation
** Create a partial object graph in JSON with a single call
** May be used to require fewer GET requests
** View the denormalisation spec for examples

h2. Incomplete list of limitations

* Error handling is not robust
* Destroying an object results in non transactional nullification of child/peer references
* Objects can talk to only one database at a time
* No caching is used. Although adding an LRU cache would be fairly straightforward, this hasn't been done as it's not yet clear what caching strategies will be most effective. 

